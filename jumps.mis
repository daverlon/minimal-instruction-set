; Subroutine to triple the top of the stack
:triple
DUP             ; duplicate top
DUP             ; duplicate again
ADD             ; sum top two (original + duplicate)
ADD             ; sum again to triple
RET             ; return

; Main start somewhere in the middle
:start
PUSH 4
DUPRINT         ; prints 4
CALL triple     ; jumps to triple
DUPRINT         ; prints 12
PUSH 3
CALL square     ; jumps to square
DUPRINT         ; prints 9
PUSH 0
JZ skip_halt    ; should jump because 0
PUSH 111
PRINT           ; skipped
:skip_halt
HALT            ; stop program

; Square subroutine, placed after main
:square
DUP
MUL
RET

; Another test label before start
:test_branch
PUSH 7
JNZ do_call     ; 7 != 0, should jump
PUSH 999
PRINT           ; skipped
:do_call
CALL triple
DUPRINT         ; prints 21

; Arbitrary label after HALT (should never execute)
:never
PUSH 1
PRINT